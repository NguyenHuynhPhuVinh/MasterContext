Directory structure:
├── LICENSE
├── README.md
├── components.json
├── index.html
├── package.json
├── public/
├── src/
│   ├── App.css
│   ├── App.tsx
│   ├── assets/
│   ├── components/
│   │   ├── FileTreeView.tsx
│   │   ├── GroupManager.tsx
│   │   ├── ProjectStats.tsx
│   │   ├── SettingsDialog.tsx
│   │   ├── ThemeToggle.tsx
│   │   └── ui/
│   │       ├── alert-dialog.tsx
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── dialog.tsx
│   │       ├── dropdown-menu.tsx
│   │       ├── form.tsx
│   │       ├── input.tsx
│   │       ├── label.tsx
│   │       ├── resizable.tsx
│   │       ├── scroll-area.tsx
│   │       ├── switch.tsx
│   │       ├── textarea.tsx
│   │       └── tooltip.tsx
│   ├── hooks/
│   │   └── useDashboard.ts
│   ├── lib/
│   │   ├── treeUtils.ts
│   │   └── utils.ts
│   ├── main.tsx
│   ├── scenes/
│   │   ├── DashboardScene.tsx
│   │   ├── GroupEditorScene.tsx
│   │   ├── ScanningScene.tsx
│   │   └── WelcomeScene.tsx
│   ├── store/
│   │   ├── appStore.ts
│   │   └── types.ts
│   └── vite-env.d.ts
├── src-tauri/
│   ├── Cargo.toml
│   ├── build.rs
│   ├── capabilities/
│   │   └── default.json
│   ├── gen/
│   ├── icons/
│   │   ├── 128x128.png
│   │   ├── 128x128@2x.png
│   │   ├── 32x32.png
│   │   ├── Square107x107Logo.png
│   │   ├── Square142x142Logo.png
│   │   ├── Square150x150Logo.png
│   │   ├── Square284x284Logo.png
│   │   ├── Square30x30Logo.png
│   │   ├── Square310x310Logo.png
│   │   ├── Square44x44Logo.png
│   │   ├── Square71x71Logo.png
│   │   ├── Square89x89Logo.png
│   │   ├── StoreLogo.png
│   │   ├── icon.icns
│   │   ├── icon.ico
│   │   └── icon.png
│   ├── src/
│   │   ├── commands.rs
│   │   ├── context_generator.rs
│   │   ├── file_cache.rs
│   │   ├── lib.rs
│   │   ├── main.rs
│   │   ├── models.rs
│   │   └── project_scanner.rs
│   └── tauri.conf.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts


================================================
FILE: src/App.css
================================================
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


================================================
FILE: src/App.tsx
================================================
// src/App.tsx
import { useEffect, useMemo } from "react";
import { listen } from "@tauri-apps/api/event";
import { Toaster, toast } from "sonner"; // <-- THÊM IMPORT
import { useAppStore, useAppActions } from "./store/appStore";
import { type GroupStats, type CachedProjectData } from "./store/types";
import { WelcomeScene } from "./scenes/WelcomeScene";
import { DashboardScene } from "./scenes/DashboardScene";
import { GroupEditorScene } from "./scenes/GroupEditorScene";
import { ScanningScene } from "./scenes/ScanningScene";
import { throttle } from "@/lib/utils"; // <-- Import hàm throttle
import "./App.css";

function App() {
  const selectedPath = useAppStore((state) => state.selectedPath);
  const activeScene = useAppStore((state) => state.activeScene);
  const isScanning = useAppStore((state) => state.isScanning); // <-- Lấy state isScanning
  const {
    _setScanProgress,
    _setScanComplete,
    _setScanError,
    _setGroupUpdateComplete,
    rescanProject, // <-- Lấy action rescanProject
  } = useAppActions();

  // --- THÊM MỚI: Logic áp dụng theme khi ứng dụng khởi động ---
  useEffect(() => {
    // Đọc theme từ localStorage, nếu không có thì mặc định là 'light'
    const theme = localStorage.getItem("theme") || "light";
    const root = window.document.documentElement;

    // Xóa các class cũ để đảm bảo sạch sẽ
    root.classList.remove("light", "dark");

    // Thêm class theme hiện tại vào thẻ <html>
    root.classList.add(theme);
  }, []); // Mảng rỗng `[]` đảm bảo effect này chỉ chạy một lần khi App được mount

  // --- THAY ĐỔI: Tạo một phiên bản throttled của hàm cập nhật ---
  const throttledSetScanProgress = useMemo(
    () => throttle((file: string) => _setScanProgress(file), 10), // Cập nhật tối đa 10 lần/giây
    [_setScanProgress]
  );

  // --- LẮNG NGHE SỰ KIỆN TỪ RUST ---
  useEffect(() => {
    const unlistenFuncs: Promise<() => void>[] = [];

    // --- THAY ĐỔI: Sử dụng hàm đã được throttle ---
    unlistenFuncs.push(
      listen<string>("scan_progress", (event) => {
        throttledSetScanProgress(event.payload);
      })
    );

    unlistenFuncs.push(
      // --- SỬA LỖI: SỬA KIỂU DỮ LIỆU TỪ ProjectStats THÀNH CachedProjectData ---
      listen<CachedProjectData>("scan_complete", (event) => {
        _setScanComplete(event.payload);
        toast.success("Phân tích dự án hoàn tất!"); // <-- THÊM TOAST
        // --- ĐÃ XÓA LỆNH GỌI GÂY LẶP. Logic này giờ được xử lý hoàn toàn trong Rust. ---
      })
    );

    unlistenFuncs.push(
      listen<string>("scan_error", (event) => {
        _setScanError(event.payload);
        toast.error(`Lỗi khi phân tích dự án: ${event.payload}`); // <-- THÊM TOAST
      })
    );

    // Thêm listener cho group_update_complete
    unlistenFuncs.push(
      // --- THAY ĐỔI: Thêm `paths` vào payload ---
      listen<{ groupId: string; stats: GroupStats; paths: string[] }>(
        "group_update_complete",
        (event) => {
          _setGroupUpdateComplete(event.payload);
          toast.success("Lưu nhóm thành công!"); // <-- THÊM TOAST
        }
      )
    );

    // Thêm listener cho các sự kiện đồng bộ tự động
    unlistenFuncs.push(
      listen<string>("auto_sync_started", (event) => {
        toast.info(event.payload); // <-- THAY console.log BẰNG TOAST
      })
    );
    unlistenFuncs.push(
      listen<string>("auto_sync_complete", (event) => {
        toast.success(event.payload); // <-- THAY console.log BẰNG TOAST
      })
    );
    unlistenFuncs.push(
      listen<string>("auto_sync_error", (event) => {
        toast.error(`Lỗi đồng bộ: ${event.payload}`); // <-- THAY console.error BẰNG TOAST
      })
    );

    // --- THÊM LISTENER MỚI CHO VIỆC THEO DÕI FILE ---
    unlistenFuncs.push(
      listen<void>("file_change_detected", () => {
        // Chỉ quét lại nếu không đang trong một quá trình quét khác
        if (!useAppStore.getState().isScanning) {
          toast.info("Phát hiện thay đổi, bắt đầu quét lại dự án...");
          rescanProject();
        }
      })
    );

    // Dọn dẹp listener khi component unmount
    return () => {
      unlistenFuncs.forEach((unlisten) => {
        unlisten.then((f) => f());
      });
    };
  }, [
    _setScanProgress,
    _setScanComplete,
    _setScanError,
    throttledSetScanProgress,
    _setGroupUpdateComplete,
    rescanProject, // <-- Thêm dependency
  ]); // <-- Thêm dependency

  const renderContent = () => {
    // Ưu tiên hiển thị màn hình quét
    if (isScanning) {
      return <ScanningScene />;
    }

    if (!selectedPath) {
      return (
        <div className="flex flex-1 items-center justify-center">
          <WelcomeScene />
        </div>
      );
    }

    switch (activeScene) {
      case "groupEditor":
        return <GroupEditorScene />;
      case "dashboard":
      default:
        return <DashboardScene />;
    }
  };

  return (
    <div className="h-screen w-screen flex flex-col bg-background text-foreground">
      {/* --- THÊM COMPONENT TOASTER VÀO ĐÂY --- */}
      <Toaster richColors />
      {renderContent()}
    </div>
  );
}

export default App;


================================================
FILE: src/components/FileTreeView.tsx
================================================
// src/components/FileTreeView.tsx
import { useState, useEffect, useRef } from "react"; // <-- Thêm useEffect, useRef
import { ChevronRight, Folder, File as FileIcon } from "lucide-react";
import { cn } from "@/lib/utils";

export interface FileNode {
  name: string;
  path: string;
  children?: FileNode[] | null;
}

// --- HÀM HELPER: Lấy tất cả đường dẫn con cháu ---
const getDescendantPaths = (node: FileNode): string[] => {
  if (!Array.isArray(node.children)) return [];
  return node.children.flatMap((child) => [
    child.path,
    ...getDescendantPaths(child),
  ]);
};

// --- HÀM HELPER: Xác định trạng thái lựa chọn của một node ---
const getNodeSelectionState = (
  node: FileNode,
  selectedPaths: Set<string>
): "checked" | "unchecked" | "indeterminate" => {
  if (!Array.isArray(node.children)) {
    return selectedPaths.has(node.path) ? "checked" : "unchecked";
  }

  const descendantPaths = getDescendantPaths(node);
  const selectedDescendants = descendantPaths.filter((p) =>
    selectedPaths.has(p)
  );

  if (selectedDescendants.length === 0) {
    return "unchecked";
  }
  if (
    selectedDescendants.length === descendantPaths.length &&
    selectedPaths.has(node.path)
  ) {
    return "checked";
  }
  return "indeterminate";
};

interface FileTreeViewProps {
  node: FileNode;
  selectedPaths: Set<string>;
  onToggle: (node: FileNode, isSelected: boolean) => void; // <-- Sửa prop để truyền cả node
  level?: number;
}

export function FileTreeView({
  node,
  selectedPaths,
  onToggle,
  level = 0,
}: FileTreeViewProps) {
  const checkboxRef = useRef<HTMLInputElement>(null);
  const isDirectory = Array.isArray(node.children);
  const [isOpen, setIsOpen] = useState(level < 2);

  const selectionState = isDirectory
    ? getNodeSelectionState(node, selectedPaths)
    : selectedPaths.has(node.path)
    ? "checked"
    : "unchecked";

  useEffect(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = selectionState === "indeterminate";
    }
  }, [selectionState]);

  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onToggle(node, e.target.checked);
  };

  const handleToggleDirectory = () => {
    if (isDirectory) setIsOpen(!isOpen);
  };

  return (
    <div>
      <div
        className="flex items-center py-1 px-2 rounded-md hover:bg-accent"
        style={{ paddingLeft: `${level * 1.5 + 0.5}rem` }}
      >
        <input
          ref={checkboxRef}
          type="checkbox"
          checked={selectionState === "checked"}
          onChange={handleCheckboxChange}
          onClick={(e) => e.stopPropagation()}
          className="mr-2 h-4 w-4"
        />
        <div
          onClick={handleToggleDirectory}
          className="flex items-center cursor-pointer flex-grow"
        >
          {isDirectory ? (
            <>
              <ChevronRight
                className={cn(
                  "h-4 w-4 mr-1 shrink-0 transition-transform duration-200",
                  isOpen && "rotate-90"
                )}
              />
              <Folder className="h-4 w-4 mr-2 text-yellow-500" />
            </>
          ) : (
            <FileIcon className="h-4 w-4 mr-2 text-blue-500" />
          )}
          <span>{node.name}</span>
        </div>
      </div>
      {isDirectory && isOpen && node.children && (
        <div>
          {node.children.map((child) => (
            <FileTreeView
              key={child.path}
              node={child}
              selectedPaths={selectedPaths}
              onToggle={onToggle}
              level={level + 1}
            />
          ))}
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/components/GroupManager.tsx
================================================
// src/components/GroupManager.tsx
import { useState, useEffect } from "react";
import { listen } from "@tauri-apps/api/event";
import { useAppStore, useAppActions } from "@/store/appStore"; // <-- Sửa: Lấy trực tiếp useAppStore
import { type Group } from "@/store/types";
import { invoke } from "@tauri-apps/api/core";
import { save } from "@tauri-apps/plugin-dialog";
import { writeTextFile } from "@tauri-apps/plugin-fs";
import { writeText } from "@tauri-apps/plugin-clipboard-manager";
import { toast } from "sonner";
import { formatBytes, cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  MoreHorizontal,
  Trash2,
  Pencil,
  Download,
  BrainCircuit,
  ListChecks,
  File,
  Folder,
  HardDrive,
  Loader2,
  Link,
  ClipboardCopy,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

interface GroupManagerProps {
  onEditGroup: (group: Group) => void;
}

export function GroupManager({ onEditGroup }: GroupManagerProps) {
  const groups = useAppStore((state) => state.groups);
  const rootPath = useAppStore((state) => state.rootPath);
  const activeProfile = useAppStore((state) => state.activeProfile); // <-- THÊM MỚI: Lấy hồ sơ đang hoạt động
  const { deleteGroup, editGroupContent, setGroupCrossSync } = useAppActions();

  // State quản lý nhóm nào đang trong quá trình xuất
  const [exportingGroupId, setExportingGroupId] = useState<string | null>(null);
  const [copyingGroupId, setCopyingGroupId] = useState<string | null>(null);

  // State quản lý dialog tùy chọn
  const [exportOptionsOpen, setExportOptionsOpen] = useState(false);
  const [groupToExport, setGroupToExport] = useState<Group | null>(null);
  const [useFullTree, setUseFullTree] = useState(false);

  // State loading BÊN TRONG dialog
  const [isConfirmingExport, setIsConfirmingExport] = useState(false);

  // State MỚI để lưu trữ context tạm thời từ backend
  const [pendingExportData, setPendingExportData] = useState<{
    context: string;
    group: Group;
  } | null>(null);

  // --- useEffect 1: Lắng nghe sự kiện từ Rust ---
  useEffect(() => {
    const unlistenComplete = listen<{ groupId: string; context: string }>(
      "group_export_complete",
      (event) => {
        const targetGroup = groups.find((g) => g.id === event.payload.groupId);
        if (targetGroup) {
          setPendingExportData({
            context: event.payload.context,
            group: targetGroup,
          });
        }
      }
    );

    const unlistenError = listen<string>("group_export_error", (event) => {
      console.error("Lỗi khi xuất nhóm từ backend:", event.payload);
      toast.error(`Đã xảy ra lỗi khi xuất file: ${event.payload}`);
      setIsConfirmingExport(false);
      setExportingGroupId(null);
      setExportOptionsOpen(false);
    });

    return () => {
      unlistenComplete.then((f) => f());
      unlistenError.then((f) => f());
    };
  }, [groups]);

  // --- useEffect 2: Xử lý việc mở dialog lưu file ---
  useEffect(() => {
    if (pendingExportData) {
      const showSaveDialog = async () => {
        try {
          const defaultName = `${pendingExportData.group.name.replace(
            /\s+/g,
            "_"
          )}_context.txt`;
          const filePath = await save({
            title: `Lưu Ngữ cảnh cho nhóm "${pendingExportData.group.name}"`,
            defaultPath: defaultName,
            filters: [{ name: "Text File", extensions: ["txt"] }],
          });

          if (filePath) {
            await writeTextFile(filePath, pendingExportData.context);
            toast.success(`Đã lưu file thành công!`);
          }
        } catch (error) {
          console.error("Lỗi khi lưu file ngữ cảnh:", error);
          toast.error("Đã xảy ra lỗi khi lưu file.");
        } finally {
          setPendingExportData(null);
          setIsConfirmingExport(false);
          setExportingGroupId(null);
          setExportOptionsOpen(false);
        }
      };

      showSaveDialog();
    }
  }, [pendingExportData]);

  const handleOpenExportOptions = (group: Group) => {
    setGroupToExport(group);
    setExportOptionsOpen(true);
    setUseFullTree(false);
  };

  const handleConfirmExport = () => {
    // <-- CẬP NHẬT: Thêm kiểm tra activeProfile
    if (!groupToExport || !rootPath || !activeProfile) return;

    setIsConfirmingExport(true);
    setExportingGroupId(groupToExport.id);

    try {
      // <-- CẬP NHẬT: Thêm `profileName` vào payload
      invoke("start_group_export", {
        groupId: groupToExport.id,
        rootPathStr: rootPath,
        profileName: activeProfile,
        useFullTree: useFullTree,
      });
    } catch (error) {
      console.error("Lỗi khi gọi command start_group_export:", error);
      toast.error("Không thể bắt đầu quá trình xuất file.");
      setIsConfirmingExport(false);
      setExportingGroupId(null);
    }
  };

  const handleCloseDialog = () => {
    if (!isConfirmingExport) {
      setExportOptionsOpen(false);
    }
  };

  const handleCopyContext = async (group: Group) => {
    // <-- CẬP NHẬT: Thêm kiểm tra activeProfile
    if (!rootPath || !activeProfile) return;
    setCopyingGroupId(group.id);
    try {
      // <-- CẬP NHẬT: Thêm `profileName` vào payload
      const context = await invoke<string>("generate_group_context", {
        groupId: group.id,
        rootPathStr: rootPath,
        profileName: activeProfile,
        useFullTree: true,
      });
      await writeText(context);
      toast.success(`Đã sao chép ngữ cảnh nhóm "${group.name}"`);
    } catch (error) {
      console.error(`Lỗi khi sao chép ngữ cảnh nhóm ${group.name}:`, error);
      toast.error(`Không thể sao chép: ${error}`);
    } finally {
      setCopyingGroupId(null);
    }
  };

  return (
    <>
      {groups.length === 0 ? (
        <div className="text-center py-16 border-2 border-dashed rounded-lg mt-6">
          <h3 className="text-xl font-semibold">Chưa có nhóm nào</h3>
          <p className="text-muted-foreground mt-2">
            Hãy bắt đầu bằng cách tạo một nhóm mới.
          </p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mt-6">
          {groups.map((group) => (
            <Card key={group.id} className="flex flex-col">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle>{group.name}</CardTitle>
                    <CardDescription className="pt-2 line-clamp-3">
                      {group.description || "Không có mô tả"}
                    </CardDescription>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => onEditGroup(group)}>
                        <Pencil className="mr-2 h-4 w-4" /> Chỉnh sửa
                      </DropdownMenuItem>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <DropdownMenuItem
                            onSelect={(e: Event) => e.preventDefault()}
                            className="text-red-500"
                          >
                            <Trash2 className="mr-2 h-4 w-4" /> Xóa
                          </DropdownMenuItem>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>
                              Bạn có chắc chắn muốn xóa?
                            </AlertDialogTitle>
                            <AlertDialogDescription>
                              Hành động này không thể hoàn tác. Nhóm "
                              {group.name}" sẽ bị xóa vĩnh viễn.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Hủy</AlertDialogCancel>
                            <AlertDialogAction
                              onClick={() => deleteGroup(group.id)}
                              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                            >
                              Xóa
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </CardHeader>
              <CardContent className="flex-grow">
                <div className="flex flex-col gap-2 text-sm text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <File className="h-4 w-4" />
                    <span>
                      {group.stats.total_files.toLocaleString()} tệp tin
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Folder className="h-4 w-4" />
                    <span>
                      {group.stats.total_dirs.toLocaleString()} thư mục
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <HardDrive className="h-4 w-4" />
                    <span>
                      Tổng dung lượng: {formatBytes(group.stats.total_size)}
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <BrainCircuit className="h-4 w-4" />
                    <span
                      className={cn(
                        group.tokenLimit &&
                          group.stats.token_count > group.tokenLimit &&
                          "text-destructive font-bold"
                      )}
                    >
                      {group.stats.token_count.toLocaleString()}
                      {group.tokenLimit && group.tokenLimit > 0
                        ? ` / ${group.tokenLimit.toLocaleString()}`
                        : ""}
                      {" tokens"}
                    </span>
                  </div>
                </div>

                <div className="border-t mt-4 pt-4">
                  <div className="flex items-center justify-between">
                    <Label
                      htmlFor={`cross-sync-${group.id}`}
                      className="flex flex-col cursor-pointer"
                    >
                      <span>
                        <Link className="inline-block h-4 w-4 mr-2" />
                        Đồng bộ chéo
                      </span>
                      <span className="text-xs text-muted-foreground font-normal">
                        Tự động thêm file liên quan khi quét lại.
                      </span>
                    </Label>
                    <Switch
                      id={`cross-sync-${group.id}`}
                      checked={group.crossSyncEnabled ?? false}
                      onCheckedChange={(enabled) =>
                        setGroupCrossSync(group.id, enabled)
                      }
                    />
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex flex-col gap-2">
                <Button
                  size="sm"
                  onClick={() => editGroupContent(group.id)}
                  className="w-full"
                >
                  <ListChecks className="mr-2 h-4 w-4" /> Quản lý nội dung
                </Button>
                <div className="flex gap-2 w-full">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleCopyContext(group)}
                    disabled={!!exportingGroupId || !!copyingGroupId}
                    className="flex-1"
                  >
                    {copyingGroupId === group.id ? (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <ClipboardCopy className="mr-2 h-4 w-4" />
                    )}
                    Sao chép
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleOpenExportOptions(group)}
                    disabled={!!exportingGroupId || !!copyingGroupId}
                    className="flex-1"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Xuất
                  </Button>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}

      {/* --- DIALOG MỚI CHO TÙY CHỌN XUẤT FILE --- */}
      <AlertDialog open={exportOptionsOpen} onOpenChange={handleCloseDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>
              Tùy chọn xuất cho nhóm "{groupToExport?.name}"
            </AlertDialogTitle>
            <AlertDialogDescription>
              Chọn cách bạn muốn cấu trúc cây thư mục trong file ngữ cảnh được
              xuất ra.
            </AlertDialogDescription>
          </AlertDialogHeader>

          <div className="flex items-center space-x-2 my-4">
            <Switch
              id="full-tree-switch"
              checked={useFullTree}
              onCheckedChange={setUseFullTree}
              disabled={isConfirmingExport}
            />
            <Label htmlFor="full-tree-switch" className="cursor-pointer">
              Sử dụng cây thư mục đầy đủ của dự án
            </Label>
          </div>
          <p className="text-sm text-muted-foreground -mt-2">
            {useFullTree
              ? "File xuất sẽ hiển thị toàn bộ cấu trúc dự án. Chỉ nội dung các tệp trong nhóm này được bao gồm."
              : "File xuất sẽ chỉ hiển thị cấu trúc thư mục chứa các tệp đã chọn trong nhóm này."}
          </p>

          <AlertDialogFooter>
            <AlertDialogCancel disabled={isConfirmingExport}>
              Hủy
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmExport}
              disabled={isConfirmingExport}
            >
              {isConfirmingExport ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : null}
              {isConfirmingExport ? "Đang xử lý..." : "Xác nhận và Xuất"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


================================================
FILE: src/components/ProjectStats.tsx
================================================
// src/components/ProjectStats.tsx
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter, // <-- Thêm CardFooter
} from "@/components/ui/card";
import { Button } from "@/components/ui/button"; // <-- Thêm Button
import {
  File,
  Folder,
  HardDrive,
  Info,
  BrainCircuit,
  Download,
  Loader2,
  ClipboardCopy, // <-- THÊM ICON MỚI
} from "lucide-react"; // <-- Thêm icon
import { type ProjectStats as ProjectStatsData } from "@/store/types"; // <-- Sửa đường dẫn import
import { formatBytes } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// --- CẬP NHẬT: Xóa prop `wasCopied` không còn cần thiết ---
interface ProjectStatsProps {
  path: string | null;
  stats: ProjectStatsData | null;
  onExportProject: () => void;
  isExporting: boolean;
  onCopyProject: () => void;
  isCopying: boolean;
}

export function ProjectStats({
  path,
  stats,
  onExportProject,
  isExporting,
  onCopyProject,
  isCopying,
}: ProjectStatsProps) {
  return (
    <Card className="flex flex-col h-fit">
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-base">Thống kê dự án</CardTitle>
        <Tooltip>
          <TooltipTrigger asChild>
            <Info className="h-4 w-4 cursor-help text-muted-foreground" />
          </TooltipTrigger>
          <TooltipContent>
            <p>
              Các tệp bị loại trừ bởi .gitignore và các file lock sẽ không được
              tính.
            </p>
          </TooltipContent>
        </Tooltip>
      </CardHeader>
      <CardContent>
        {/* Phần hiển thị stats giữ nguyên */}
        <div className="flex flex-col gap-2 text-sm text-muted-foreground">
          <div className="flex items-center gap-2">
            <Folder className="h-4 w-4 shrink-0" />
            <span className="truncate" title={path ?? ""}>
              {path ?? "..."}
            </span>
          </div>
          {stats ? (
            <>
              <div className="flex items-center gap-2">
                <File className="h-4 w-4" />
                <span>{stats.total_files.toLocaleString()} tệp tin</span>
              </div>
              <div className="flex items-center gap-2">
                <Folder className="h-4 w-4" />
                <span>{stats.total_dirs.toLocaleString()} thư mục</span>
              </div>
              <div className="flex items-center gap-2">
                <HardDrive className="h-4 w-4" />
                <span>Tổng dung lượng: {formatBytes(stats.total_size)}</span>
              </div>
              <div className="flex items-center gap-2">
                <BrainCircuit className="h-4 w-4" />
                <span>
                  Ước tính: {stats.total_tokens.toLocaleString()} tokens
                </span>
              </div>
            </>
          ) : (
            <div className="pt-2">Đang tải thống kê...</div>
          )}
        </div>
      </CardContent>
      {/* --- PHẦN MỚI: Thêm footer với các nút --- */}
      <CardFooter className="flex flex-col gap-2">
        {/* --- CẬP NHẬT: Đơn giản hóa logic nút Sao chép --- */}
        <Button
          variant="outline"
          size="sm"
          onClick={onCopyProject}
          disabled={isCopying || isExporting}
          className="w-full"
        >
          {isCopying ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <ClipboardCopy className="mr-2 h-4 w-4" />
          )}
          {isCopying ? "Đang xử lý..." : "Sao chép"}
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={onExportProject}
          disabled={isExporting || isCopying}
          className="w-full"
        >
          {isExporting ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Download className="mr-2 h-4 w-4" />
          )}
          {isExporting ? "Đang xuất..." : "Xuất file"}
        </Button>
      </CardFooter>
    </Card>
  );
}


================================================
FILE: src/components/SettingsDialog.tsx
================================================
// src/components/SettingsDialog.tsx
import { useState, useEffect } from "react";
import { useAppStore, useAppActions } from "@/store/appStore";
import { useShallow } from "zustand/react/shallow";
import { open } from "@tauri-apps/plugin-dialog";
import { toast } from "sonner"; // <-- THÊM IMPORT
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea"; // <-- THÊM IMPORT
import { ThemeToggle } from "./ThemeToggle";
import { FolderUp, Loader2, FileText } from "lucide-react";

interface SettingsDialogProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
}

export function SettingsDialog({ isOpen, onOpenChange }: SettingsDialogProps) {
  const {
    syncEnabled,
    syncPath,
    customIgnorePatterns,
    activeProfile,
    isWatchingFiles,
    rootPath,
  } = useAppStore(
    // <-- Lấy thêm isWatchingFiles và rootPath
    useShallow((state) => ({
      syncEnabled: state.syncEnabled,
      syncPath: state.syncPath,
      customIgnorePatterns: state.customIgnorePatterns,
      activeProfile: state.activeProfile,
      isWatchingFiles: state.isWatchingFiles, // <-- Lấy state mới
      rootPath: state.rootPath, // <-- Cần để biết có nên cho bật switch không
    }))
  );
  const { setSyncSettings, setCustomIgnorePatterns, setFileWatching } =
    useAppActions(); // <-- Lấy action mới

  // State cục bộ cho textarea và trạng thái loading
  const [ignoreText, setIgnoreText] = useState("");
  const [isSaving, setIsSaving] = useState(false);

  // Đồng bộ state từ store vào state cục bộ khi dialog mở
  useEffect(() => {
    if (isOpen) {
      setIgnoreText((customIgnorePatterns || []).join("\n"));
    }
  }, [isOpen, customIgnorePatterns]);

  const handleToggleSync = (enabled: boolean) => {
    if (enabled && !syncPath) {
      toast.warning(
        "Bạn phải chọn một thư mục đồng bộ trước khi bật tính năng này."
      );
      return;
    }
    setSyncSettings({ enabled, path: syncPath });
  };

  const handleChooseSyncPath = async () => {
    try {
      const result = await open({
        directory: true,
        multiple: false,
        title: "Chọn thư mục để tự động đồng bộ",
      });
      if (typeof result === "string") {
        setSyncSettings({ enabled: true, path: result });
      }
    } catch (error) {
      console.error("Lỗi khi chọn thư mục đồng bộ:", error);
    }
  };

  const handleSaveIgnorePatterns = async () => {
    setIsSaving(true);
    try {
      const patterns = ignoreText
        .split("\n")
        .map((p) => p.trim())
        .filter((p) => p.length > 0);
      await setCustomIgnorePatterns(patterns);
      onOpenChange(false); // Đóng dialog sau khi quét lại bắt đầu
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="!max-w-4xl">
        <DialogHeader>
          <DialogTitle>Cài đặt</DialogTitle>
          <DialogDescription>
            Tùy chỉnh các thiết lập cho ứng dụng. Các cài đặt sẽ được áp dụng
            cho hồ sơ đang hoạt động.
          </DialogDescription>
        </DialogHeader>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 py-4">
          {/* Cột cài đặt chung */}
          <div className="space-y-6">
            <div className="flex items-center justify-between rounded-lg border p-4">
              <Label htmlFor="theme-toggle">Giao diện (Sáng/Tối)</Label>
              <ThemeToggle />
            </div>

            {/* --- THÊM KHỐI CÀI ĐẶT MỚI --- */}
            <div className="space-y-4 rounded-lg border p-4">
              <h3 className="font-semibold">Theo dõi dự án</h3>
              <div className="flex items-center justify-between">
                <Label htmlFor="watching-toggle" className="flex flex-col">
                  <span>Theo dõi thời gian thực</span>
                  <span className="text-xs text-muted-foreground">
                    Tự động quét lại khi có thay đổi file.
                  </span>
                </Label>
                <Switch
                  id="watching-toggle"
                  checked={isWatchingFiles}
                  onCheckedChange={setFileWatching}
                  disabled={!rootPath} // Vô hiệu hóa nếu chưa mở dự án
                />
              </div>
            </div>

            <div className="space-y-4 rounded-lg border p-4">
              <div className="flex justify-between items-center">
                <h3 className="font-semibold">Đồng bộ tự động</h3>
                <div className="flex items-center text-sm text-muted-foreground gap-2 border rounded-full px-3 py-1">
                  <FileText className="h-4 w-4" />
                  <span>
                    Hồ sơ:{" "}
                    <span className="font-semibold">{activeProfile}</span>
                  </span>
                </div>
              </div>
              <p className="text-sm text-muted-foreground -mt-2">
                Cài đặt này chỉ áp dụng cho hồ sơ hiện tại. Mỗi hồ sơ có thể có
                thư mục đồng bộ riêng.
              </p>
              <div className="flex items-center justify-between">
                <Label htmlFor="sync-toggle" className="flex flex-col">
                  <span>Bật đồng bộ nền</span>
                  <span className="text-xs text-muted-foreground">
                    Tự động xuất lại khi có thay đổi.
                  </span>
                </Label>
                <Switch
                  id="sync-toggle"
                  checked={syncEnabled}
                  onCheckedChange={handleToggleSync}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="sync-path">Thư mục đồng bộ</Label>
                <div className="flex items-center gap-2">
                  <div
                    id="sync-path"
                    className="flex-grow truncate rounded-md border bg-muted px-3 py-2 text-sm text-muted-foreground"
                  >
                    {syncPath || "Chưa chọn..."}
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={handleChooseSyncPath}
                  >
                    <FolderUp className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Cột cài đặt loại trừ */}
          <div className="space-y-4 rounded-lg border p-4 flex flex-col">
            <h3 className="font-semibold">Các mẫu loại trừ tùy chỉnh</h3>
            <div className="space-y-2 flex-grow flex flex-col">
              <Label htmlFor="custom-ignore">Mẫu Glob (một mẫu mỗi dòng)</Label>
              <Textarea
                id="custom-ignore"
                placeholder={`dist/\n*.log\n__pycache__/`}
                className="h-32 overflow-y-auto resize-none"
                value={ignoreText}
                onChange={(e) => setIgnoreText(e.target.value)}
                disabled={isSaving}
              />
              <p className="text-xs text-muted-foreground">
                Các mẫu này sẽ được sử dụng cùng với file .gitignore của dự án.
              </p>
            </div>
            <DialogFooter>
              <Button
                onClick={handleSaveIgnorePatterns}
                disabled={isSaving}
                className="w-full"
              >
                {isSaving && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Lưu và Quét lại
              </Button>
            </DialogFooter>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================
FILE: src/components/ThemeToggle.tsx
================================================
// src/components/ThemeToggle.tsx
import { Moon, Sun } from "lucide-react";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";

type Theme = "dark" | "light";

export function ThemeToggle() {
  // Khởi tạo state từ localStorage hoặc mặc định là 'light'
  const [theme, setTheme] = useState<Theme>(() => {
    if (typeof localStorage !== "undefined") {
      return (localStorage.getItem("theme") as Theme) || "light";
    }
    return "light";
  });

  // Effect để cập nhật class trên thẻ <html> và lưu vào localStorage
  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove("light", "dark");
    root.classList.add(theme);
    localStorage.setItem("theme", theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));
  };

  return (
    <Button variant="ghost" size="icon" onClick={toggleTheme}>
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}


================================================
FILE: src/components/ui/alert-dialog.tsx
================================================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }


================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


================================================
FILE: src/components/ui/dialog.tsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}


================================================
FILE: src/components/ui/form.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


================================================
FILE: src/components/ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


================================================
FILE: src/components/ui/resizable.tsx
================================================
"use client"

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }


================================================
FILE: src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }


================================================
FILE: src/components/ui/switch.tsx
================================================
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }


================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }


================================================
FILE: src/components/ui/tooltip.tsx
================================================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


================================================
FILE: src/hooks/useDashboard.ts
================================================
// src/hooks/useDashboard.ts
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { invoke } from "@tauri-apps/api/core";
import { listen } from "@tauri-apps/api/event";
import { save, open } from "@tauri-apps/plugin-dialog";
import { writeTextFile } from "@tauri-apps/plugin-fs";
import { writeText } from "@tauri-apps/plugin-clipboard-manager";
import { toast } from "sonner";
import { useAppStore, useAppActions } from "@/store/appStore";
import { type Group } from "@/store/types";
import { useShallow } from "zustand/react/shallow";

// Schema validation cho form nhóm
const groupSchema = z.object({
  name: z.string().min(1, "Tên nhóm không được để trống"),
  description: z.string().optional(),
  tokenLimit: z
    .union([z.string(), z.number()])
    .optional()
    .refine((val) => {
      if (val === undefined || val === "") return true;
      const num = typeof val === "string" ? Number(val) : val;
      return num > 0;
    }, "Giới hạn token phải là số dương"),
});
type GroupFormValues = z.infer<typeof groupSchema>;

// --- THÊM SCHEMA CHO FORM HỒ SƠ ---
const profileSchema = z.object({
  name: z
    .string()
    .min(1, "Tên hồ sơ không được để trống")
    .regex(/^[a-zA-Z0-9_-]+$/, "Chỉ cho phép chữ, số, gạch dưới và gạch nối"),
});
type ProfileFormValues = z.infer<typeof profileSchema>;

export function useDashboard() {
  // --- LẤY STATE VÀ ACTIONS TỪ STORE ---
  const { rootPath, projectStats, selectedPath, profiles, activeProfile } =
    useAppStore(
      useShallow((state) => ({
        rootPath: state.rootPath,
        projectStats: state.projectStats,
        selectedPath: state.selectedPath,
        profiles: state.profiles,
        activeProfile: state.activeProfile,
      }))
    );
  const {
    addGroup,
    updateGroup,
    selectRootPath,
    rescanProject,
    switchProfile, // <-- Action mới
    createProfile, // <-- Action mới
    renameProfile, // <-- Action mới
    deleteProfile, // <-- Action mới
  } = useAppActions();

  // --- STATE CỤC BỘ CỦA SCENE ---
  const [isGroupDialogOpen, setIsGroupDialogOpen] = useState(false);
  const [editingGroup, setEditingGroup] = useState<Group | null>(null);
  const [isExporting, setIsExporting] = useState(false);
  const [isCopying, setIsCopying] = useState(false);

  // --- STATE MỚI CHO DIALOG HỒ SƠ ---
  const [profileDialogMode, setProfileDialogMode] = useState<
    "create" | "rename" | null
  >(null);
  const [isProfileDeleteDialogOpen, setIsProfileDeleteDialogOpen] =
    useState(false);

  // --- QUẢN LÝ FORM ---
  const groupForm = useForm<GroupFormValues>({
    resolver: zodResolver(groupSchema),
    defaultValues: { name: "", description: "", tokenLimit: undefined },
  });

  const profileForm = useForm<ProfileFormValues>({
    resolver: zodResolver(profileSchema),
    defaultValues: { name: "" },
  });

  // --- LOGIC LẮNG NGHE SỰ KIỆN TỪ BACKEND ---
  useEffect(() => {
    const unlistenComplete = listen<string>(
      "project_export_complete",
      async (event) => {
        try {
          const filePath = await save({
            title: "Lưu Ngữ cảnh Dự án",
            defaultPath: "project_context.txt",
            filters: [{ name: "Text File", extensions: ["txt"] }],
          });
          if (filePath) {
            await writeTextFile(filePath, event.payload);
            toast.success(`Đã lưu file thành công!`);
          }
        } catch (error) {
          console.error("Lỗi khi lưu file ngữ cảnh dự án:", error);
          toast.error("Đã xảy ra lỗi khi lưu file.");
        } finally {
          setIsExporting(false);
        }
      }
    );

    const unlistenError = listen<string>("project_export_error", (event) => {
      console.error("Lỗi khi xuất dự án:", event.payload);
      toast.error(`Đã xảy ra lỗi khi xuất file: ${event.payload}`);
      setIsExporting(false);
    });

    return () => {
      unlistenComplete.then((f) => f());
      unlistenError.then((f) => f());
    };
  }, []);

  // --- CÁC HÀM XỬ LÝ SỰ KIỆN (HANDLERS) CHO NHÓM ---
  const handleOpenGroupDialog = (group: Group | null = null) => {
    setEditingGroup(group);
    groupForm.reset(
      group
        ? {
            name: group.name,
            description: group.description || "",
            tokenLimit: group.tokenLimit,
          }
        : { name: "", description: "", tokenLimit: undefined }
    );
    setIsGroupDialogOpen(true);
  };

  const onGroupSubmit = (data: GroupFormValues) => {
    const groupData = {
      name: data.name,
      description: data.description || "",
      tokenLimit:
        data.tokenLimit === "" || data.tokenLimit === undefined
          ? undefined
          : typeof data.tokenLimit === "string"
          ? Number(data.tokenLimit)
          : data.tokenLimit,
    };
    if (editingGroup) {
      updateGroup({ ...editingGroup, ...groupData });
    } else {
      addGroup(groupData);
    }
    toast.success(
      editingGroup ? "Cập nhật nhóm thành công!" : "Tạo nhóm mới thành công!"
    );
    setIsGroupDialogOpen(false);
  };

  // --- CÁC HÀM XỬ LÝ SỰ KIỆN (HANDLERS) CHO DỰ ÁN ---
  const handleOpenAnotherFolder = async () => {
    try {
      const result = await open({
        directory: true,
        multiple: false,
        title: "Chọn một thư mục dự án khác",
      });
      if (typeof result === "string") {
        selectRootPath(result);
      }
    } catch (error) {
      console.error("Lỗi khi chọn thư mục khác:", error);
    }
  };

  const handleExportProject = () => {
    if (!rootPath || !activeProfile) return;
    setIsExporting(true);
    invoke("start_project_export", {
      path: rootPath,
      profileName: activeProfile,
    });
  };

  const handleCopyProject = async () => {
    if (!rootPath || !activeProfile) return;
    setIsCopying(true);
    try {
      const context = await invoke<string>("generate_project_context", {
        path: rootPath,
        profileName: activeProfile,
      });
      await writeText(context);
      toast.success("Đã sao chép ngữ cảnh dự án vào clipboard!");
    } catch (error) {
      console.error("Lỗi khi sao chép ngữ cảnh dự án:", error);
      toast.error(`Không thể sao chép: ${error}`);
    } finally {
      setIsCopying(false);
    }
  };

  const handleConfirmRescan = async () => {
    await rescanProject();
  };

  // --- CÁC HÀM MỚI ĐỂ XỬ LÝ HỒ SƠ ---
  const handleOpenProfileDialog = (mode: "create" | "rename") => {
    setProfileDialogMode(mode);
    if (mode === "rename") {
      profileForm.setValue("name", activeProfile);
    } else {
      profileForm.reset({ name: "" });
    }
  };

  const onProfileSubmit = async (data: ProfileFormValues) => {
    if (profileDialogMode === "create") {
      await createProfile(data.name);
    } else if (profileDialogMode === "rename" && activeProfile) {
      await renameProfile(activeProfile, data.name);
    }
    setProfileDialogMode(null);
  };

  const handleConfirmDeleteProfile = async () => {
    if (activeProfile) {
      await deleteProfile(activeProfile);
    }
    setIsProfileDeleteDialogOpen(false);
  };

  // --- TRẢ VỀ "API" CHO COMPONENT UI ---
  return {
    // Data
    selectedPath,
    projectStats,
    profiles,
    activeProfile,
    // Trạng thái UI
    isGroupDialogOpen,
    isExporting,
    isCopying,
    editingGroup,
    profileDialogMode,
    isProfileDeleteDialogOpen,
    // Forms
    groupForm,
    profileForm,
    // Handlers
    setIsGroupDialogOpen,
    handleOpenGroupDialog,
    onGroupSubmit,
    handleOpenAnotherFolder,
    handleExportProject,
    handleCopyProject,
    handleConfirmRescan,
    // Profile handlers
    switchProfile,
    handleOpenProfileDialog,
    setProfileDialogMode,
    onProfileSubmit,
    setIsProfileDeleteDialogOpen,
    handleConfirmDeleteProfile,
  };
}


================================================
FILE: src/lib/treeUtils.ts
================================================
// src/lib/treeUtils.ts
import type { FileNode } from "@/store/types";

/**
 * Lấy tất cả đường dẫn của chính node và các con cháu của nó.
 * @param node - Node bắt đầu.
 * @returns Mảng các chuỗi đường dẫn.
 */
export const getDescendantAndSelfPaths = (node: FileNode): string[] => {
  const paths = [node.path];
  if (Array.isArray(node.children)) {
    for (const child of node.children) {
      paths.push(...getDescendantAndSelfPaths(child));
    }
  }
  return paths;
};

/**
 * Tối ưu hóa danh sách các đường dẫn đã chọn thành một danh sách tối thiểu để lưu.
 * Nếu một thư mục được chọn hoàn toàn, chỉ đường dẫn thư mục đó được giữ lại.
 * Nếu một thư mục chỉ được chọn một phần, hàm sẽ đi sâu vào trong.
 * @param node - Node gốc của cây thư mục.
 * @param selectedPaths - Set chứa tất cả các đường dẫn được chọn trên UI (đã mở rộng).
 * @returns Mảng các đường dẫn đã được tối ưu hóa.
 */
export const prunePathsForSave = (
  node: FileNode,
  selectedPaths: Set<string>
): string[] => {
  const prunedPaths: string[] = [];

  // Hàm đệ quy để duyệt cây
  function traverse(currentNode: FileNode) {
    // Bỏ qua nếu node này không được chọn và không phải là thư mục gốc
    if (!selectedPaths.has(currentNode.path) && currentNode.path !== "") {
      return;
    }

    // Trường hợp 1: Node là một file. Nếu được chọn, thêm nó vào.
    if (
      !Array.isArray(currentNode.children) ||
      currentNode.children.length === 0
    ) {
      if (selectedPaths.has(currentNode.path)) {
        prunedPaths.push(currentNode.path);
      }
      return;
    }

    // Trường hợp 2: Node là một thư mục.
    const descendantPaths = getDescendantAndSelfPaths(currentNode);
    // Kiểm tra xem TẤT CẢ các con cháu (và chính nó) có nằm trong selectedPaths không.
    const isFullySelected = descendantPaths.every((p) => selectedPaths.has(p));

    if (isFullySelected) {
      // Nếu được chọn hoàn toàn, chỉ cần thêm đường dẫn của thư mục này và dừng lại.
      // Không thêm đường dẫn gốc rỗng vào kết quả cuối cùng.
      if (currentNode.path !== "") {
        prunedPaths.push(currentNode.path);
      } else {
        // Trường hợp đặc biệt: Nếu TOÀN BỘ dự án được chọn, chúng ta cần duyệt
        // các con cấp 1 của nó để trả về danh sách ["src", "public", ...]
        for (const child of currentNode.children ?? []) {
          traverse(child);
        }
      }
    } else {
      // Nếu chỉ được chọn một phần, phải đi sâu vào từng con để kiểm tra.
      for (const child of currentNode.children ?? []) {
        traverse(child);
      }
    }
  }

  traverse(node);
  return prunedPaths;
};

/**
 * Mở rộng một danh sách đường dẫn tối thiểu (đã lưu) thành một Set đầy đủ để hiển thị trên UI.
 * @param rootNode - Node gốc của cây thư mục.
 * @param savedPaths - Set chứa các đường dẫn đã được tối ưu hóa.
 * @returns Set chứa tất cả các đường dẫn cần được check trên UI.
 */
export const expandPaths = (
  rootNode: FileNode,
  savedPaths: Set<string>
): Set<string> => {
  const expanded = new Set<string>();

  function traverse(node: FileNode) {
    // Nếu đường dẫn của node này nằm trong danh sách đã lưu,
    // thêm nó và tất cả các con cháu của nó vào set mở rộng.
    if (savedPaths.has(node.path)) {
      getDescendantAndSelfPaths(node).forEach((p) => expanded.add(p));
      // Vì đã thêm tất cả, không cần đi sâu hơn nữa từ node này.
      return;
    }

    // Nếu không, tiếp tục duyệt các con của nó.
    if (Array.isArray(node.children)) {
      for (const child of node.children) {
        traverse(child);
      }
    }
  }

  // Luôn bắt đầu từ gốc
  traverse(rootNode);

  // Sau khi mở rộng, phải thêm các thư mục cha ngược lên đến gốc
  // để đảm bảo UI hiển thị đúng (VD: checkbox indeterminate).
  const pathsToAddParentsFor = [...expanded];
  for (const path of pathsToAddParentsFor) {
    let current = path;
    while (current.includes("/")) {
      current = current.substring(0, current.lastIndexOf("/"));
      if (current) {
        // Chỉ thêm nếu không phải chuỗi rỗng
        expanded.add(current);
      }
    }
  }
  // Luôn thêm đường dẫn gốc
  expanded.add("");

  return expanded;
};


================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// --- HÀM MỚI ---
export function formatBytes(bytes: number, decimals = 2): string {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
}

// --- HÀM MỚI: THROTTLE ---
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function throttle<T extends (...args: any[]) => void>(
  func: T,
  delay: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  let lastArgs: Parameters<T> | null = null;
  let timeoutId: NodeJS.Timeout | null = null;

  return function (this: ThisParameterType<T>, ...args: Parameters<T>) {
    lastArgs = args;
    if (!inThrottle) {
      inThrottle = true;
      func.apply(this, args);
      setTimeout(() => {
        inThrottle = false;
        if (lastArgs) {
          // Nếu có cuộc gọi nào bị bỏ lỡ, thực hiện cuộc gọi cuối cùng
          func.apply(this, lastArgs);
          lastArgs = null;
        }
      }, delay);
    } else if (timeoutId === null) {
      // Đảm bảo cập nhật cuối cùng sau khi hết throttle
      timeoutId = setTimeout(() => {
        if (lastArgs) {
          func.apply(this, lastArgs);
          lastArgs = null;
        }
        timeoutId = null;
      }, delay);
    }
  };
}


================================================
FILE: src/scenes/DashboardScene.tsx
================================================
// src/scenes/DashboardScene.tsx
import { useState } from "react";
import { useDashboard } from "@/hooks/useDashboard";

// Import các component UI cần thiết
import {
  ResizablePanelGroup,
  ResizablePanel,
  ResizableHandle,
} from "@/components/ui/resizable";
import { ProjectStats as ProjectStatsComponent } from "@/components/ProjectStats";
import { GroupManager } from "@/components/GroupManager";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  PlusCircle,
  FolderSync,
  RotateCw,
  Settings,
  ChevronDown,
  Edit,
  Trash2,
  Plus,
} from "lucide-react"; // Thêm icons cho profile
import { ScrollArea } from "@/components/ui/scroll-area";
import { SettingsDialog } from "@/components/SettingsDialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAppStore } from "@/store/appStore";

export function DashboardScene() {
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  // --- COMPONENT CHỈ CÒN LẠI VIỆC GỌI HOOK VÀ RENDER UI ---
  const {
    selectedPath,
    projectStats,
    profiles,
    activeProfile,
    isGroupDialogOpen,
    isExporting,
    isCopying,
    editingGroup,
    profileDialogMode,
    isProfileDeleteDialogOpen,
    groupForm,
    profileForm,
    setIsGroupDialogOpen,
    handleOpenGroupDialog,
    onGroupSubmit,
    handleOpenAnotherFolder,
    handleExportProject,
    handleCopyProject,
    handleConfirmRescan,
    handleOpenProfileDialog,
    setProfileDialogMode,
    onProfileSubmit,
    setIsProfileDeleteDialogOpen,
    handleConfirmDeleteProfile,
  } = useDashboard();

  return (
    <>
      <ResizablePanelGroup direction="horizontal" className="h-full w-full">
        {/* === SIDEBAR === */}
        <ResizablePanel defaultSize={25} minSize={20} maxSize={40}>
          <div className="flex h-full flex-col gap-4 p-6">
            {" "}
            {/* Thay đổi padding p-4 -> p-6 */}
            <div className="flex items-center justify-between px-2">
              <h2 className="text-xl font-bold">Thông tin Dự án</h2>
              <div className="flex items-center">
                <AlertDialog>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <AlertDialogTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <RotateCw className="h-5 w-5" />
                        </Button>
                      </AlertDialogTrigger>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Quét lại dự án</p>
                    </TooltipContent>
                  </Tooltip>
                  <AlertDialogContent>
                    <AlertDialogHeader>
                      <AlertDialogTitle>
                        Bạn có chắc chắn muốn quét lại?
                      </AlertDialogTitle>
                      <AlertDialogDescription>
                        Hành động này sẽ đọc lại toàn bộ cây thư mục và cập nhật
                        tất cả thống kê, bao gồm cả các nhóm đã tạo. Quá trình
                        này có thể mất một lúc đối với các dự án lớn.
                      </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                      <AlertDialogCancel>Hủy</AlertDialogCancel>
                      <AlertDialogAction onClick={handleConfirmRescan}>
                        Tiếp tục
                      </AlertDialogAction>
                    </AlertDialogFooter>
                  </AlertDialogContent>
                </AlertDialog>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={handleOpenAnotherFolder}
                    >
                      <FolderSync className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Mở dự án khác</p>
                  </TooltipContent>
                </Tooltip>
              </div>
            </div>
            <ProjectStatsComponent
              path={selectedPath}
              stats={projectStats}
              onExportProject={handleExportProject}
              isExporting={isExporting}
              onCopyProject={handleCopyProject}
              isCopying={isCopying}
              // --- XÓA `wasCopied` ---
            />
          </div>
        </ResizablePanel>

        <ResizableHandle withHandle />

        {/* === MAIN CONTENT (CÓ LAYOUT MỚI) === */}
        <ResizablePanel defaultSize={75}>
          <div className="flex flex-col h-full">
            {/* --- HEADER CỐ ĐỊNH --- */}
            <header className="flex items-center justify-between p-6 border-b">
              <div>
                <h1 className="text-3xl font-bold">Phân Nhóm Ngữ Cảnh</h1>
                <p className="text-muted-foreground">
                  Tạo và quản lý các nhóm ngữ cảnh cho dự án của bạn.
                </p>
              </div>
              <div className="flex items-center gap-2">
                {/* --- PROFILE DROPDOWN --- */}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="min-w-[120px]">
                      <span className="truncate">{activeProfile}</span>
                      <ChevronDown className="ml-2 h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-48">
                    <DropdownMenuLabel>Hồ sơ ngữ cảnh</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {profiles.map((profile) => (
                      <DropdownMenuItem
                        key={profile}
                        onClick={() =>
                          useAppStore.getState().actions.switchProfile(profile)
                        }
                        className={profile === activeProfile ? "bg-accent" : ""}
                      >
                        {profile}
                      </DropdownMenuItem>
                    ))}
                    <DropdownMenuSeparator />
                    <DropdownMenuItem
                      onClick={() => handleOpenProfileDialog("create")}
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Tạo hồ sơ mới
                    </DropdownMenuItem>
                    {activeProfile !== "default" && (
                      <>
                        <DropdownMenuItem
                          onClick={() => handleOpenProfileDialog("rename")}
                        >
                          <Edit className="mr-2 h-4 w-4" />
                          Đổi tên hồ sơ
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem
                          onClick={handleConfirmDeleteProfile}
                          className="text-destructive focus:text-destructive"
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Xóa hồ sơ
                        </DropdownMenuItem>
                      </>
                    )}
                  </DropdownMenuContent>
                </DropdownMenu>
                <Button onClick={() => handleOpenGroupDialog()}>
                  <PlusCircle className="mr-2 h-4 w-4" /> Tạo nhóm mới
                </Button>
                {/* --- THAY ĐỔI: Thay ThemeToggle bằng nút Cài đặt --- */}
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setIsSettingsOpen(true)}
                >
                  <Settings className="h-5 w-5" />
                </Button>
              </div>
            </header>

            {/* --- VÙNG NỘI DUNG CUỘN ĐƯỢC --- */}
            <ScrollArea className="flex-1">
              <div className="p-6">
                <GroupManager onEditGroup={handleOpenGroupDialog} />
              </div>
            </ScrollArea>
          </div>
        </ResizablePanel>
      </ResizablePanelGroup>

      {/* === DIALOG TẠO/SỬA NHÓM (Không thay đổi) === */}
      <Dialog open={isGroupDialogOpen} onOpenChange={setIsGroupDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingGroup ? "Chỉnh sửa nhóm" : "Tạo nhóm mới"}
            </DialogTitle>
            <DialogDescription>
              Điền thông tin chi tiết cho nhóm của bạn.
            </DialogDescription>
          </DialogHeader>
          <Form {...groupForm}>
            <form
              onSubmit={groupForm.handleSubmit(onGroupSubmit)}
              className="space-y-4"
            >
              <FormField
                control={groupForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tên nhóm</FormLabel>
                    <FormControl>
                      <Input placeholder="Ví dụ: Backend APIs" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={groupForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Mô tả</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Mô tả ngắn về chức năng của nhóm này..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* --- TRƯỜNG MỚI CHO NGÂN SÁCH TOKEN --- */}
              <FormField
                control={groupForm.control}
                name="tokenLimit"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Giới hạn Token (Tùy chọn)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="Ví dụ: 8000"
                        {...field}
                        value={field.value ?? ""}
                        onChange={(e) =>
                          field.onChange(
                            e.target.value === "" ? undefined : e.target.value
                          )
                        }
                      />
                    </FormControl>
                    <FormDescription>
                      Đặt ngân sách token để nhận cảnh báo nếu nhóm vượt quá.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter>
                <DialogClose asChild>
                  <Button type="button" variant="ghost">
                    Hủy
                  </Button>
                </DialogClose>
                <Button type="submit">Lưu</Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* --- THÊM MỚI: Render Dialog Cài đặt --- */}
      <SettingsDialog
        isOpen={isSettingsOpen}
        onOpenChange={setIsSettingsOpen}
      />

      {/* === PROFILE DIALOG === */}
      <Dialog
        open={profileDialogMode !== null}
        onOpenChange={(open) => !open && setProfileDialogMode(null)}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {profileDialogMode === "rename"
                ? "Đổi tên hồ sơ"
                : "Tạo hồ sơ mới"}
            </DialogTitle>
            <DialogDescription>
              {profileDialogMode === "rename"
                ? "Nhập tên mới cho hồ sơ ngữ cảnh."
                : "Nhập tên cho hồ sơ ngữ cảnh mới."}
            </DialogDescription>
          </DialogHeader>
          <Form {...profileForm}>
            <form
              onSubmit={profileForm.handleSubmit(onProfileSubmit)}
              className="space-y-4"
            >
              <FormField
                control={profileForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tên hồ sơ</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Ví dụ: development, staging, production"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Tên hồ sơ chỉ được chứa chữ cái, số, dấu gạch ngang và dấu
                      gạch dưới.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter>
                <DialogClose asChild>
                  <Button type="button" variant="ghost">
                    Hủy
                  </Button>
                </DialogClose>
                <Button type="submit">
                  {profileDialogMode === "rename" ? "Đổi tên" : "Tạo"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* === PROFILE DELETE DIALOG === */}
      <AlertDialog
        open={isProfileDeleteDialogOpen}
        onOpenChange={setIsProfileDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Xóa hồ sơ</AlertDialogTitle>
            <AlertDialogDescription>
              Bạn có chắc chắn muốn xóa hồ sơ "{activeProfile}"? Hành động này
              không thể hoàn tác.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Hủy</AlertDialogCancel>
            <AlertDialogAction onClick={handleConfirmDeleteProfile}>
              Xóa
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


================================================
FILE: src/scenes/GroupEditorScene.tsx
================================================
// src/scenes/GroupEditorScene.tsx
import { useCallback } from "react";
import { useAppStore, useAppActions } from "@/store/appStore";
import { useShallow } from "zustand/react/shallow";
import { FileTreeView, type FileNode } from "@/components/FileTreeView";
import { Button } from "@/components/ui/button";
import {
  ArrowLeft,
  Save,
  Loader2,
  Link,
  Link2Off,
  CheckCheck,
  XCircle,
} from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

export function GroupEditorScene() {
  const {
    saveEditingGroup,
    cancelEditingGroup,
    toggleEditingPath,
    setCrossLinkingEnabled,
    selectAllFiles, // <-- Lấy action mới
    deselectAllFiles, // <-- Lấy action mới
  } = useAppActions();

  const {
    group,
    fileTree,
    isSaving,
    tempSelectedPaths,
    isCrossLinkingEnabled,
  } = useAppStore(
    useShallow((state) => ({
      group: state.groups.find((g) => g.id === state.editingGroupId),
      fileTree: state.fileTree,
      isSaving: state.isUpdatingGroupId === state.editingGroupId,
      tempSelectedPaths: state.tempSelectedPaths,
      isCrossLinkingEnabled: state.isCrossLinkingEnabled,
    }))
  );

  const handleTogglePath = useCallback(
    (toggledNode: FileNode, isSelected: boolean) => {
      toggleEditingPath(toggledNode, isSelected);
    },
    [toggleEditingPath]
  );

  if (!group || !fileTree || tempSelectedPaths === null) {
    return (
      <div className="flex flex-1 items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen">
      <header className="flex items-center justify-between p-4 border-b">
        <div>
          <h1 className="text-2xl font-bold">
            Chỉnh sửa nội dung nhóm: {group.name}
          </h1>
          <p className="text-muted-foreground">
            Chọn các tệp và thư mục để đưa vào ngữ cảnh.
          </p>
        </div>
        <div className="flex items-center gap-4">
          {/* --- KHỐI MỚI CHO CÁC NÚT CHỌN NHANH --- */}
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={selectAllFiles}>
              <CheckCheck className="mr-2 h-4 w-4" />
              Chọn tất cả
            </Button>
            <Button variant="outline" size="sm" onClick={deselectAllFiles}>
              <XCircle className="mr-2 h-4 w-4" />
              Bỏ chọn tất cả
            </Button>
          </div>
          {/* --- KẾT THÚC KHỐI MỚI --- */}

          {/* Dải phân cách trực quan */}
          <div className="h-8 w-px bg-border"></div>

          <div className="flex items-center space-x-2">
            <Switch
              id="cross-linking-toggle"
              checked={isCrossLinkingEnabled}
              onCheckedChange={setCrossLinkingEnabled}
            />
            <Label
              htmlFor="cross-linking-toggle"
              className="flex items-center gap-2 cursor-pointer"
            >
              {isCrossLinkingEnabled ? (
                <Link className="h-4 w-4" />
              ) : (
                <Link2Off className="h-4 w-4" />
              )}
              Tự động chọn file liên quan
            </Label>
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              onClick={cancelEditingGroup}
              disabled={isSaving}
            >
              <ArrowLeft className="mr-2 h-4 w-4" /> Quay lại
            </Button>
            <Button onClick={saveEditingGroup} disabled={isSaving}>
              {isSaving ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Save className="mr-2 h-4 w-4" />
              )}
              {isSaving ? "Đang lưu..." : "Lưu thay đổi"}
            </Button>
          </div>
        </div>
      </header>
      <main className="flex-1 overflow-hidden">
        <ScrollArea className="h-full p-4">
          <FileTreeView
            node={fileTree}
            selectedPaths={tempSelectedPaths}
            onToggle={handleTogglePath}
          />
        </ScrollArea>
      </main>
    </div>
  );
}


================================================
FILE: src/scenes/ScanningScene.tsx
================================================
// src/scenes/ScanningScene.tsx
import { useAppStore } from "@/store/appStore";
import { Loader2 } from "lucide-react";

export function ScanningScene() {
  const currentFile = useAppStore((state) => state.scanProgress.currentFile);

  return (
    <div className="flex flex-1 flex-col items-center justify-center gap-4">
      <Loader2 className="h-12 w-12 animate-spin text-primary" />
      <h2 className="text-2xl font-semibold">Đang phân tích dự án...</h2>
      <p className="text-muted-foreground max-w-xl truncate text-center font-mono text-sm">
        {currentFile ? currentFile : "Đang khởi tạo..."}
      </p>
    </div>
  );
}


================================================
FILE: src/scenes/WelcomeScene.tsx
================================================
// src/scenes/WelcomeScene.tsx
import { Folder } from "lucide-react";
import { open } from "@tauri-apps/plugin-dialog";
import { useAppActions } from "@/store/appStore";
import { Button } from "@/components/ui/button"; // <-- Import Button từ Shadcn

export function WelcomeScene() {
  const { selectRootPath } = useAppActions();

  const handleSelectFolder = async () => {
    try {
      const result = await open({
        directory: true,
        multiple: false,
        title: "Chọn một thư mục dự án",
      });
      if (typeof result === "string") {
        selectRootPath(result);
      }
    } catch (error) {
      console.error("Lỗi khi chọn thư mục:", error);
    }
  };

  return (
    <main className="flex flex-1 flex-col items-center justify-center gap-6 p-8 text-center">
      <h1 className="text-4xl font-bold">Master Context</h1>
      <p className="text-sm text-muted-foreground">
        Công cụ quản lý và tạo ngữ cảnh cho dự án của bạn.
      </p>
      {/* --- CẬP NHẬT: Thay thế <button> bằng <Button> --- */}
      <Button size="lg" onClick={handleSelectFolder}>
        <Folder className="mr-2 h-6 w-6" />
        Chọn Thư Mục
      </Button>
    </main>
  );
}


================================================
FILE: src/store/appStore.ts
================================================
// src/store/appStore.ts
import { create } from "zustand";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner"; // <-- THÊM IMPORT
import {
  type CachedProjectData,
  type FileNode,
  type GroupStats,
  type ProjectStats,
  type ScanProgress,
  type Group,
  type FileMetadata,
} from "./types";
import {
  getDescendantAndSelfPaths,
  prunePathsForSave,
  expandPaths,
} from "@/lib/treeUtils";

// --- DI CHUYỂN TOÀN BỘ CÁC HÀM HELPER VÀO ĐÂY ---
// Điều này giúp tập trung logic xử lý state ở một nơi duy nhất.

// --- PHẦN MỚI: Định nghĩa kiểu dữ liệu ProjectData khớp với Rust ---
// Thay thế bằng CachedProjectData

// Thêm FileNode interface

// --- INTERFACE MỚI CHO THỐNG KÊ NHÓM ---

// --- INTERFACE MỚI CHO METADATA FILE ---

// --- INTERFACE CHO THỐNG KÊ TỔNG QUAN DỰ ÁN ---

// --- HÀM TẠO STATS MẶC ĐỊNH ---
const defaultGroupStats = (): GroupStats => ({
  total_files: 0,
  total_dirs: 0,
  total_size: 0,
  token_count: 0,
});

// --- INTERFACE MỚI TỪ RUST ---
/*
interface GroupContextResult {
  context: string;
  stats: GroupStats; // <-- Nhận về stats
}
*/

// Payload từ sự kiện scan_complete
// interface ScanCompletePayload {
//   stats: ProjectStats;
//   fileTree: FileNode;
// }

interface AppState {
  rootPath: string | null;
  selectedPath: string | null;
  groups: Group[];
  // --- STATE MỚI ĐỂ ĐIỀU HƯỚNG ---
  activeScene: "dashboard" | "groupEditor";
  editingGroupId: string | null;
  // --- STATE MỚI ---
  projectStats: ProjectStats | null;
  isScanning: boolean;
  scanProgress: ScanProgress; // <-- THÊM STATE MỚI
  fileTree: FileNode | null; // <-- THÊM STATE MỚI
  isUpdatingGroupId: string | null; // <-- State loading khi lưu nhóm
  // --- STATE MỚI ---
  tempSelectedPaths: Set<string> | null; // State tạm để chỉnh sửa cây thư mục
  fileMetadataCache: Record<string, FileMetadata> | null; // <-- THÊM STATE NÀY
  isCrossLinkingEnabled: boolean; // <-- THÊM STATE NÀY
  // --- STATE MỚI CHO CÀI ĐẶT ĐỒNG BỘ ---
  syncEnabled: boolean;
  syncPath: string | null;
  customIgnorePatterns: string[]; // <-- THÊM STATE MỚI
  // --- STATE MỚI CHO HỒ SƠ ---
  profiles: string[];
  activeProfile: string;
  isWatchingFiles: boolean; // <-- THÊM STATE MỚI

  actions: {
    selectRootPath: (path: string) => Promise<void>; // <-- Chuyển thành async
    // --- THÊM MỚI: Action để quét lại dự án ---
    rescanProject: () => Promise<void>;
    reset: () => void;
    addGroup: (group: Omit<Group, "id" | "paths" | "stats">) => void;
    updateGroup: (group: Omit<Group, "paths" | "stats">) => void;
    deleteGroup: (groupId: string) => void;
    // --- ACTIONS MỚI ---
    editGroupContent: (groupId: string) => void;
    showDashboard: () => void;
    updateGroupPaths: (groupId: string, paths: string[]) => void;
    // --- THÊM CÁC ACTION "NỘI BỘ" ĐỂ XỬ LÝ SỰ KIỆN ---
    _setScanProgress: (file: string) => void;
    _setScanComplete: (payload: CachedProjectData) => void;
    _setScanError: (error: string) => void;
    // --- ACTIONS MỚI ---
    _setGroupUpdateComplete: (payload: {
      groupId: string;
      stats: GroupStats;
      paths: string[];
    }) => void;
    // --- ACTIONS MỚI CHO VIỆC CHỈNH SỬA NHÓM ---
    startEditingGroup: (groupId: string) => void;
    toggleEditingPath: (node: FileNode, isSelected: boolean) => void;
    cancelEditingGroup: () => void;
    saveEditingGroup: () => Promise<void>;
    setCrossLinkingEnabled: (enabled: boolean) => void; // <-- THÊM ACTION NÀY
    selectAllFiles: () => void; // <-- THÊM ACTION NÀY
    deselectAllFiles: () => void; // <-- THÊM ACTION NÀY
    // --- ACTION MỚI CHO CÀI ĐẶT ---
    setSyncSettings: (settings: {
      enabled: boolean;
      path: string | null;
    }) => Promise<void>;
    setGroupCrossSync: (groupId: string, enabled: boolean) => Promise<void>; // <-- THÊM ACTION MỚI
    setCustomIgnorePatterns: (patterns: string[]) => Promise<void>; // <-- THÊM ACTION MỚI
    // --- ACTIONS MỚI CHO HỒ SƠ ---
    switchProfile: (profileName: string) => Promise<void>;
    createProfile: (profileName: string) => Promise<void>;
    renameProfile: (oldName: string, newName: string) => Promise<void>;
    deleteProfile: (profileName: string) => Promise<void>;
    setFileWatching: (enabled: boolean) => Promise<void>; // <-- THÊM ACTION MỚI
  };
}

export const useAppStore = create<AppState>((set, get) => {
  // --- HÀM HELPER MỚI ĐỂ TẢI DỮ LIỆU CỦA MỘT HỒ SƠ ---
  const loadProfileData = (path: string, profileName: string) => {
    set({
      isScanning: true,
      activeProfile: profileName,
      scanProgress: { currentFile: `Đang tải hồ sơ "${profileName}"...` },
    });
    try {
      invoke("open_project", { path, profileName });
    } catch (error) {
      console.error(`Lỗi khi tải hồ sơ ${profileName}:`, error);
      set({ isScanning: false });
      toast.error(`Không thể tải hồ sơ: ${profileName}.`);
    }
  };

  // --- PHẦN MỚI: Hàm trợ giúp để cập nhật groups trên backend ---
  const updateGroupsOnBackend = async () => {
    const { rootPath, groups, activeProfile } = get();
    if (rootPath) {
      try {
        await invoke("update_groups_in_project_data", {
          path: rootPath,
          profileName: activeProfile,
          groups: groups,
        });
      } catch (error) {
        console.error("Lỗi khi cập nhật nhóm trên backend:", error);
      }
    }
  };

  return {
    rootPath: null,
    selectedPath: null,
    groups: [],
    activeScene: "dashboard", // <-- Giá trị mặc định
    editingGroupId: null,
    // --- GIÁ TRỊ MẶC ĐỊNH CHO STATE MỚI ---
    projectStats: null,
    isScanning: false,
    scanProgress: { currentFile: null }, // <-- GIÁ TRỊ MẶC ĐỊNH
    fileTree: null,
    isUpdatingGroupId: null,
    tempSelectedPaths: null, // Giá trị mặc định
    fileMetadataCache: null, // <-- Thêm giá trị mặc định
    isCrossLinkingEnabled: false, // <-- Thêm giá trị mặc định
    // --- GIÁ TRỊ MẶC ĐỊNH CHO CÀI ĐẶT ĐỒNG BỘ ---
    syncEnabled: false,
    syncPath: null,
    customIgnorePatterns: [], // <-- GIÁ TRỊ MẶC ĐỊNH
    // --- GIÁ TRỊ MẶC ĐỊNH CHO STATE HỒ SƠ ---
    profiles: ["default"],
    activeProfile: "default",
    isWatchingFiles: false, // <-- GIÁ TRỊ MẶC ĐỊNH
    actions: {
      // --- CẬP NHẬT selectRootPath ---
      selectRootPath: async (path) => {
        // Dừng watcher cũ trước khi chuyển dự án
        const { isWatchingFiles } = get();
        if (isWatchingFiles) {
          await invoke("stop_file_watching");
        }

        set({
          rootPath: path,
          selectedPath: path,
          activeScene: "dashboard",
          isScanning: true,
          scanProgress: { currentFile: "Đang tìm các hồ sơ..." },
        });

        try {
          const profiles = await invoke<string[]>("list_profiles", {
            projectPath: path,
          });
          set({ profiles });
          // Tải hồ sơ 'default' sau khi chọn một thư mục mới
          loadProfileData(path, "default");

          // Bắt đầu watcher mới nếu cần
          if (isWatchingFiles) {
            await invoke("start_file_watching", { path });
          }
        } catch (error) {
          console.error("Lỗi khi lấy danh sách hồ sơ:", error);
          set({
            isScanning: false,
            profiles: ["default"],
            activeProfile: "default",
          });
          toast.error("Không thể lấy danh sách hồ sơ.");
        }
      },
      // --- THÊM MỚI: Logic cho action rescanProject ---
      rescanProject: async () => {
        const { rootPath, activeProfile } = get();
        if (!rootPath) return;
        loadProfileData(rootPath, activeProfile);
      },
      reset: () =>
        set({
          rootPath: null,
          selectedPath: null,
          groups: [],
          activeScene: "dashboard",
          editingGroupId: null,
          profiles: ["default"],
          activeProfile: "default",
        }), // Reset cả groups

      // --- THAY ĐỔI: Chuyển hướng ngay sau khi tạo nhóm ---
      addGroup: (newGroup) => {
        const groupWithDefaults: Group = {
          ...newGroup,
          id: Date.now().toString(),
          paths: [],
          stats: defaultGroupStats(),
          crossSyncEnabled: false,
          tokenLimit: newGroup.tokenLimit || undefined, // Đảm bảo trường mới được thêm vào
        };
        // Cập nhật state để thêm nhóm mới và chuyển sang màn hình chỉnh sửa
        set((state) => ({
          groups: [...state.groups, groupWithDefaults],
          activeScene: "groupEditor",
          editingGroupId: groupWithDefaults.id,
        }));
        // Khởi tạo trạng thái chỉnh sửa cho nhóm mới (ví dụ: tempSelectedPaths)
        get().actions.startEditingGroup(groupWithDefaults.id);
        // Lưu lại sự thay đổi trên backend
        updateGroupsOnBackend();
      },
      updateGroup: (updatedGroup) => {
        set((state) => ({
          groups: state.groups.map((g) =>
            g.id === updatedGroup.id ? { ...g, ...updatedGroup } : g
          ),
        }));
        updateGroupsOnBackend(); // <-- GỌI HÀM MỚI
      },
      deleteGroup: (groupId) => {
        set((state) => ({
          groups: state.groups.filter((g) => g.id !== groupId),
        }));
        updateGroupsOnBackend(); // <-- GỌI HÀM MỚI
      },

      // --- CÁC ACTION MỚI ---
      editGroupContent: (groupId) => {
        get().actions.startEditingGroup(groupId);
        set({ activeScene: "groupEditor", editingGroupId: groupId });
      },
      showDashboard: () => {
        set({ activeScene: "dashboard", editingGroupId: null });
      },
      updateGroupPaths: (groupId, paths) => {
        // Không cần async nữa
        const { rootPath, activeProfile } = get();
        if (!rootPath) return;
        set({ isUpdatingGroupId: groupId });

        // Chỉ "bắn" lệnh đi và không chờ đợi
        invoke("start_group_update", {
          groupId,
          rootPathStr: rootPath,
          profileName: activeProfile,
          paths,
        });
        // Logic sẽ được tiếp tục trong listener sự kiện `group_update_complete`
      },

      // --- CÁC ACTION MỚI ĐỂ XỬ LÝ SỰ KIỆN TỪ RUST ---
      _setScanProgress: (file) => {
        set({ scanProgress: { currentFile: file } });
      },
      _setScanComplete: (payload: CachedProjectData) => {
        set({
          projectStats: payload.stats,
          fileTree: payload.file_tree,
          // --- THAY ĐỔI: Lưu cả file metadata cache ---
          fileMetadataCache: payload.file_metadata_cache,
          groups: (payload.groups || []).map((g) => ({
            ...g,
            paths: g.paths || [],
            stats: g.stats || defaultGroupStats(),
            crossSyncEnabled: (g as any).cross_sync_enabled ?? false, // <-- XỬ LÝ DỮ LIỆU MỚI
            tokenLimit: g.tokenLimit, // <-- XỬ LÝ DỮ LIỆU MỚI
          })),
          isScanning: false,
          // Cập nhật cài đặt đồng bộ từ file đã tải
          syncEnabled: payload.sync_enabled ?? false,
          syncPath: payload.sync_path ?? null,
          customIgnorePatterns: payload.custom_ignore_patterns ?? [], // <-- CẬP NHẬT STATE
          // file_metadata_cache được backend quản lý, frontend không cần lưu
        });
      },
      _setScanError: (error) => {
        console.error("Scan error from Rust:", error);
        // Alert/toast đã được xử lý ở App.tsx, ở đây chỉ cần cập nhật state
        set({ isScanning: false });
      },
      // --- ACTIONS MỚI ---
      _setGroupUpdateComplete: ({ groupId, stats, paths }) => {
        set((state) => ({
          groups: state.groups.map((g) =>
            g.id === groupId
              ? // --- THAY ĐỔI: Sử dụng `paths` trực tiếp từ payload ---
                { ...g, paths: paths, stats: stats }
              : g
          ),
          isUpdatingGroupId: null, // Tắt loading
        }));
        // --- THAY ĐỔI: Gọi cancelEditingGroup để dọn dẹp và navigate ---
        get().actions.cancelEditingGroup();
        // Backend đã lưu trong start_group_update, không cần lưu lại
      },
      // --- LOGIC CHỈNH SỬA NHÓM ĐƯỢC TẬP TRUNG TẠI ĐÂY ---

      startEditingGroup: (groupId: string) => {
        const { groups, fileTree } = get();
        const group = groups.find((g) => g.id === groupId);
        if (group && fileTree) {
          // Khởi tạo state tạm thời bằng cách EXPAND các path đã lưu
          const expanded = expandPaths(fileTree, new Set(group.paths));
          set({ tempSelectedPaths: expanded });
        }
      },

      toggleEditingPath: (toggledNode: FileNode, isSelected: boolean) => {
        const { isCrossLinkingEnabled, fileMetadataCache, tempSelectedPaths } =
          get();
        if (!tempSelectedPaths || !fileMetadataCache) return;

        const newSelectedPaths = new Set(tempSelectedPaths);

        if (isSelected) {
          // --- LOGIC MỚI CHO VIỆC CHỌN VÀ LIÊN KẾT CHÉO ---
          const pathsToAdd = new Set<string>();
          const queue = [toggledNode.path]; // Bắt đầu với node được chọn
          const visited = new Set<string>();

          // Nếu bật liên kết chéo, duyệt đồ thị phụ thuộc
          if (isCrossLinkingEnabled) {
            while (queue.length > 0) {
              const currentPath = queue.shift()!;
              if (visited.has(currentPath)) continue;

              visited.add(currentPath);
              pathsToAdd.add(currentPath);

              const metadata = fileMetadataCache[currentPath];
              if (metadata && metadata.links) {
                for (const link of metadata.links) {
                  if (!visited.has(link)) {
                    queue.push(link);
                  }
                }
              }
            }
          } else {
            // Nếu không, chỉ thêm node được chọn và các con của nó
            getDescendantAndSelfPaths(toggledNode).forEach((p) =>
              pathsToAdd.add(p)
            );
          }

          // Thêm tất cả các đường dẫn tìm được vào set chính
          pathsToAdd.forEach((p) => newSelectedPaths.add(p));

          // Luôn thêm các thư mục cha để UI hiển thị đúng
          const allPathsArray = Array.from(newSelectedPaths);
          for (const path of allPathsArray) {
            let parentPath = path;
            while (parentPath.lastIndexOf("/") > -1) {
              parentPath = parentPath.substring(0, parentPath.lastIndexOf("/"));
              newSelectedPaths.add(parentPath);
            }
          }
          newSelectedPaths.add("");
        } else {
          // Khi bỏ chọn, chỉ bỏ chọn node đó và các con của nó
          const pathsToRemove = getDescendantAndSelfPaths(toggledNode);
          pathsToRemove.forEach((p) => newSelectedPaths.delete(p));
        }

        set({ tempSelectedPaths: newSelectedPaths });
      },

      cancelEditingGroup: () => {
        set({
          activeScene: "dashboard",
          editingGroupId: null,
          tempSelectedPaths: null,
        });
      },

      saveEditingGroup: async () => {
        const { editingGroupId, tempSelectedPaths, fileTree } = get();

        if (editingGroupId && tempSelectedPaths && fileTree) {
          // 1. Prune the expanded UI paths back to a minimal set for saving
          const pathsToSave = prunePathsForSave(fileTree, tempSelectedPaths);

          // 2. Call the async update action
          await get().actions.updateGroupPaths(editingGroupId, pathsToSave);

          // 3. Clean up and navigate back - sẽ được xử lý bởi _setGroupUpdateComplete
        }
      },
      setCrossLinkingEnabled: (enabled: boolean) => {
        set({ isCrossLinkingEnabled: enabled });
      },

      // --- THÊM 2 ACTIONS MỚI Ở ĐÂY ---
      selectAllFiles: () => {
        const { fileTree } = get();
        if (!fileTree) return;

        // Lấy tất cả các đường dẫn có thể có từ fileTree
        const allPaths = getDescendantAndSelfPaths(fileTree);
        set({ tempSelectedPaths: new Set(allPaths) });
      },

      deselectAllFiles: () => {
        // Đơn giản là set thành một Set rỗng, nhưng vẫn giữ lại đường dẫn gốc ""
        // để cây thư mục không bị lỗi (logic prune/expand dựa vào sự tồn tại của "")
        set({ tempSelectedPaths: new Set([""]) });
      },

      // --- ACTION MỚI CHO CÀI ĐẶT ĐỒNG BỘ ---
      setSyncSettings: async ({ enabled, path }) => {
        const { rootPath, activeProfile } = get();
        if (!rootPath) return;

        // Cập nhật state ở frontend ngay lập tức
        set({ syncEnabled: enabled, syncPath: path });

        // Gọi backend để lưu cài đặt
        try {
          await invoke("update_sync_settings", {
            path: rootPath,
            profileName: activeProfile,
            enabled,
            syncPath: path,
          });
          toast.success("Lưu cài đặt đồng bộ thành công!"); // <-- THÊM TOAST
        } catch (error) {
          console.error("Lỗi khi lưu cài đặt đồng bộ:", error);
          toast.error("Không thể lưu cài đặt đồng bộ."); // <-- THAY alert BẰNG TOAST
        }
      },

      // <-- BẮT ĐẦU SỬA LỖI -->
      setGroupCrossSync: async (groupId, enabled) => {
        const { rootPath, activeProfile } = get(); // <-- Lấy thêm activeProfile
        if (!rootPath) return;

        set((state) => ({
          groups: state.groups.map((g) =>
            g.id === groupId ? { ...g, crossSyncEnabled: enabled } : g
          ),
        }));

        try {
          // <-- Thêm `profileName` vào payload
          await invoke("set_group_cross_sync", {
            path: rootPath,
            profileName: activeProfile,
            groupId,
            enabled,
          });
        } catch (error) {
          console.error("Lỗi khi cập nhật cài đặt đồng bộ chéo:", error);
          toast.error(`Không thể cập nhật đồng bộ chéo: ${error}`);
          set((state) => ({
            groups: state.groups.map((g) =>
              g.id === groupId ? { ...g, crossSyncEnabled: !enabled } : g
            ),
          }));
        }
      },
      // <-- KẾT THÚC SỬA LỖI -->
      // --- ACTION MỚI ĐỂ LƯU CÁC MẪU LOẠI TRỪ ---
      setCustomIgnorePatterns: async (patterns: string[]) => {
        const { rootPath, activeProfile } = get();
        if (!rootPath) return;

        // Cập nhật UI ngay lập tức
        set({ customIgnorePatterns: patterns });

        // Gọi backend để lưu
        try {
          await invoke("update_custom_ignore_patterns", {
            path: rootPath,
            profileName: activeProfile,
            patterns,
          });
          toast.success("Đã lưu các mẫu loại trừ. Bắt đầu quét lại dự án...");
          // Kích hoạt quét lại để áp dụng các thay đổi
          await get().actions.rescanProject();
        } catch (error) {
          console.error("Lỗi khi lưu các mẫu loại trừ tùy chỉnh:", error);
          toast.error("Không thể lưu các mẫu loại trừ.");
        }
      },
      // --- ACTIONS MỚI CHO HỒ SƠ ---
      switchProfile: async (profileName: string) => {
        const { rootPath, activeProfile } = get();
        if (!rootPath || profileName === activeProfile) return;
        loadProfileData(rootPath, profileName);
      },
      createProfile: async (profileName: string) => {
        const { rootPath, profiles } = get();
        if (!rootPath || profiles.includes(profileName)) {
          toast.error("Tên hồ sơ đã tồn tại.");
          return;
        }
        try {
          await invoke("create_profile", {
            projectPath: rootPath,
            profileName,
          });
          set({ profiles: [...profiles, profileName] });
          get().actions.switchProfile(profileName);
          toast.success(`Đã tạo và chuyển sang hồ sơ "${profileName}"`);
        } catch (error) {
          console.error("Lỗi khi tạo hồ sơ:", error);
          toast.error(`Không thể tạo hồ sơ: ${error}`);
        }
      },
      renameProfile: async (oldName: string, newName: string) => {
        const { rootPath, profiles } = get();
        if (!rootPath || profiles.includes(newName)) {
          toast.error("Tên hồ sơ mới đã tồn tại.");
          return;
        }
        try {
          await invoke("rename_profile", {
            projectPath: rootPath,
            oldName,
            newName,
          });
          set({
            profiles: profiles.map((p) => (p === oldName ? newName : p)),
            activeProfile: newName,
          });
          toast.success(`Đã đổi tên hồ sơ thành "${newName}"`);
        } catch (error) {
          console.error("Lỗi khi đổi tên hồ sơ:", error);
          toast.error(`Không thể đổi tên hồ sơ: ${error}`);
        }
      },
      deleteProfile: async (profileName: string) => {
        const { rootPath, profiles } = get();
        if (!rootPath || profileName === "default") return;
        try {
          await invoke("delete_profile", {
            projectPath: rootPath,
            profileName,
          });
          set({ profiles: profiles.filter((p) => p !== profileName) });
          // Chuyển về hồ sơ default sau khi xóa
          get().actions.switchProfile("default");
          toast.success(`Đã xóa hồ sơ "${profileName}"`);
        } catch (error) {
          console.error("Lỗi khi xóa hồ sơ:", error);
          toast.error(`Không thể xóa hồ sơ: ${error}`);
        }
      },
      // --- ACTION MỚI ĐỂ BẬT/TẮT THEO DÕI FILE ---
      setFileWatching: async (enabled: boolean) => {
        const { rootPath } = get();
        if (!rootPath) return;

        set({ isWatchingFiles: enabled });

        try {
          if (enabled) {
            await invoke("start_file_watching", { path: rootPath });
            toast.success("Đã bật theo dõi thay đổi thời gian thực.");
          } else {
            await invoke("stop_file_watching");
            toast.info("Đã tắt theo dõi thay đổi thời gian thực.");
          }
        } catch (error) {
          console.error("Lỗi khi thay đổi trạng thái theo dõi file:", error);
          toast.error(
            `Không thể ${enabled ? "bật" : "tắt"} theo dõi: ${error}`
          );
          // Revert state nếu có lỗi
          set({ isWatchingFiles: !enabled });
        }
      },
    },
  };
});

export const useAppActions = () => useAppStore((state) => state.actions);


================================================
FILE: src/store/types.ts
================================================
// src/store/types.ts

export interface CachedProjectData {
  stats: ProjectStats | null;
  file_tree: FileNode | null;
  groups: Group[];
  file_metadata_cache: Record<string, FileMetadata>;
  sync_enabled?: boolean | null;
  sync_path?: string | null;
  data_hash?: string | null;
  custom_ignore_patterns?: string[]; // <-- Sửa thành snake_case
}

export interface FileNode {
  name: string;
  path: string;
  children?: FileNode[] | null;
}

export interface GroupStats {
  total_files: number;
  total_dirs: number;
  total_size: number;
  token_count: number;
}

export interface FileMetadata {
  size: number;
  mtime: number;
  token_count: number;
  links: string[];
}

export interface ProjectStats {
  total_files: number;
  total_dirs: number;
  total_size: number;
  total_tokens: number;
}

export interface ScanProgress {
  currentFile: string | null;
}

export interface Group {
  id: string;
  name: string;
  description: string;
  paths: string[];
  stats: GroupStats;
  crossSyncEnabled?: boolean;
  tokenLimit?: number; // <-- THÊM TRƯỜNG NÀY
}


